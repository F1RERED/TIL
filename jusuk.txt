$ git init
"""
= 나 깃 이제 시작할거야
.git은 숨김폴더라 어차피 안 떠. 폴더 들어가서 뭐 할 거 없음
micka@DESKTOP-SQR4L91 MINGW64 ~/OneDrive/Desktop/Git/2 (master)
혹은 (main)
이렇게 바뀌면 깃 잘 작동 된 것
"""

$ git config --global init.defaultBranch main
$ rm -rf .git
$ git init
"""
라고 쓰면 (main)으로 바뀜
"""
"""
버전 기록할 것

그럴러면 파일 버전을 남겨놔야함
"""
 $ touch a.txt


 $ git status
 "
 On branch main

No commits yet

Untracked files:
  (use "git add <file>..." to include in what will be committed)
        a.txt
        jusuk
; 빨간 글씨

nothing added to commit but untracked files present (use "git add" to track)
"

 $ git add .
 나 여기 있는 모든 파일 전부 add 할거야
 . = 모든 파일

 $ git status
 "
On branch main

No commits yet

Changes to be committed:
  (use "git rm --cached <file>..." to unstage)
        new file:   a.txt
        new file:   jusuk

Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
        modified:   jusuk
        ; 빨간글씨
        
        "

$ git commit -m '첫번째 커밋'
"
Author identity unknown

*** Please tell me who you are.

Run

  git config --global user.email "you@example.com"
  git config --global user.name "Your Name"

to set your account's default identity.
Omit --global to set the identity only in this repository.

fatal: unable to auto-detect email address (got 'micka@DESKTOP-SQR4L91.(none)')
"
-m은 메세지
이 메세지의 내용은 버전을 기록할 건데
그 전에 니가 누군데? 누군지 말해줘
계정 등록해줘 라는 의미


git config --global user.email "mickale1023@gmail.com"
git config --global user.name "F1RERED"
내 깃허브 계정 등록
;  터미널 창에 화살표 위로 하면 이전 명령어 뜸


$ git commit -m '첫번째 커밋'
[main (root-commit) 5013ffe] 첫번째 커밋
 2 files changed, 24 insertions(+)
 create mode 100644 a.txt
 create mode 100644 jusuk

커밋 성공적.

micka@DESKTOP-SQR4L91 MINGW64 ~/OneDrive/Desktop/Git/2 (main)
$ git log
commit 5013ffe06b89e556fac475e27381b83ead29d19b (HEAD -> main)
Author: F1RERED <mickale1023@gmail.com>
Date:   Wed Jun 7 14:35:14 2023 +0900

    첫번째 커밋

micka@DESKTOP-SQR4L91 MINGW64 ~/OneDrive/Desktop/Git/2 (main)
$ git status
On branch main
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
        modified:   jusuk

no changes added to commit (use "git add" and/or "git commit -a")





명령어 의미 찾아보기

git init : 깃 시작. 정확히는 깃 저장소 초기화. 
 Git으로 관리할 수 있는 상태로 만들어주는 명령어
git add .(or 파일이름) : 현재 변경된 파일들을 모으는 작업. . = 모든 파일 모음
git commit -m '메시지' : 
git add로 모아진 파일들의 버전을 남기는 명령어. 
메시지는 커밋에 대한 설명을 작성한다.
= 메세지라는 버전을 남김
git status : 디렉토리의 상태를 보여줌. git 상태 확인 
git log : commit한 기록을 보여줌.  버전이 기록된것을 확인

이전 버전에 파일 3개
근데 2개 수정했어. 수정한 작업을 하는 공간을 working directory라고 부름
그럼 이 변화사항들을 잠시 모아서 임시버전 같은 걸 만들어 주는 것이 add
이 공간을 staging area라고 부름. 임시적 공간
이걸 commit 하면 새 버전으로 갱신하는 


$ git status
 nothing to commit, working tree clean
 변경사항이 없다. 갱신할 내용 없다는 뜻
 Changes not staged for commit
 변경되었으나 staging area로 가진 않았다. 
 현재 작업중인, 열려있는 텍스트 파일 같은 거

 왼쪽 바에 돋보기(검색) 밑에 동글라미 3개 연결된 것 누르면
 명령어 없이도 스테이징 에리어 및 commit 혹은 스테이징에리어에서 내리기 등을
 버튼 클릭으로 할 수 있다


깃은 데이터를 파일 시스템의 스냅샷 형태로 관리하고 크기가 매우 작음
스냅샷 = 사진으로 찍어서 
파일을 복제 하는 게 아니라 버전을 보고 있고
언제 찍힌 사진인지를 보고 관리

$ git log -1
최근 1개. x개


프로젝트를 만들 때에는 .git이 이미 있는 폴더나 그 하위 폴더에는 만들면 안됨
상위폴더도 지양
다른 루트의 폴더에 프로젝트 시작


cd ㅇㅇ= change directory -> ㅇㅇ으로 명령디렉토리 변경
cd .. = 상위폴더로 명령디렉토리 변경

dvc = distribute version c~
컴퓨터 소프트웨어의 상태 = 소스코드의 상태

1.5기가 짜리 100만개의 버전
깃 덕에 25기가 정도 수준.
깃의 버전관리로 용량 극대 축소

분산버전관리시스템= 
A의 컴퓨터에도, B의 컴퓨터에도, C의 컴퓨터에도 모든 버전을 갖고 있는 것

빨간글씨
modified:	product.html
이전 버전에 비해서 product.html이 수정 되었다

버전이 2개 쌓임

삭제된 파일
버전 사라지

다른 창에서 명령 입력.
버전이 복구됨
삭제된 사실이 사라짐







git remote add origin https://github.com/F1RERED/TIL.git
(origin 뒤에 붙은 주소를 앞으로 origin이라고 부를 거임
변수에 값 대입한 것과 같은 이치)
git push origin main

이렇게 쓰면 깃허브에도 업로드 됨
첫회만 이렇게 쓰고
그 다음부터는 
git push origin main
이것만 쓰면 됨

원격 저장소에 올리는걸 push라고 함


git remote add origin https://github.com/username/repositoryname.git
깃 원격저장소(remote) 추가(add) origin 이름으로 주소를
git push origin main 
깃 원격저장소로 보내(push) origin/main으로

git remote rm origin 
삭제(rm). 해당 origin 자체를 삭제함
git remote -v
원격저장소 목록 조회


git init
git add .
git commit -m '메시지'
git status
git log

git log --oneline -2
(이런 순서도 가능하구나)
한줄로 정리해서 보여줘
최근 2개

버전 삭제도 가능
근데 커밋 히스토리를 지우는 초보자들이 많아서 가급적 지양

로컬에서 삭제한 파일을 vscode 원격으로 깃허브 저장소에 있는 
파일까지 삭제하려면 어떻게 하나요?
A: 파일 삭제하고 (컴퓨터에서 로컬로 직접...) 
커밋하고 push하면 자동으로 삭제됨
버전 관리 시스템이니까 버전에서 삭제시켜버리면 
원격저장소에서도 삭제되서 갱신됨

Q. 커밋은 여러번 해도 상관 없나요? 자주 하는 것 보다 몰아서 하는 게 좋은가요?
내가 '버전'이라고 느끼는 순간, 중요한 순간에 커밋한다.
1)데이터 전처리
2)데이터 분석
3)데이터 시각화

작업중 저장이라고 생각하면 안됨. 많이 다름. 그런 느낌으로 커밋하면 안되고
이 코드가 동작하는 순간.
-----------
A) 한 번에 커밋
마크다운.md
git.md
github.md
B) 각각 따로 커밋해서 총 3번

차이는 A는 그 버전을 삭제하면 3개 파일이 싹다 날아감
버전을 되돌릴 수 없음. 완전히 지워져서
B는 내각 만약 github.md가 잘못되어서 이게 생성된
버전을 지우고 싶다하면 B는 가능, A는 불가능
데이터를 스냅샷으로 관리
뭐가 더 좋다 아니다는 각 프로젝트에 따라 다름
경험 생기면 해결될 문제

지금은 어찌되든 커밋을 하자

Q. 커밋 메시지는 어떤 형식으로 작성하는 것이 좋을까요?
A. 기본적으로는 내가 작업한 내용을 잘 담아주면 좋음
예시) 6/7 수업 vs 깃 내용 정리
나중에 내가 봤을 때 무슨 내용인지 알 게끔
프로젝트 때도 마찬가지


파일로 할 수 있는 행위 몇 개?
무수히 많아? NO. 사실 4개
CRUD: Create/Read/Update/Delete

[좋은 git commit 메시지를 위한 영어 사전]
https://blog.ull.im/engineering/2019/03/10/logs-on-git.html

여기서도 명령어 할게 몇 개 없다.

Q. 한 번에 여러 파일 커밋
git add a.txt b.txt c.txt
git add a/ b/ (끝의 /는 폴더를 의미)
git add . (모든 파일)

Q. 파일명이 터미널 창에서 입력하기 힘든 경우
1. 탭 눌러서 이름 자동완성을 쓴다
'my name.txt' 처럼 풀 네임을 따옴표 안에 넣는다
\ : 파이썬 처럼 '공\ 백' 역슬래시로 한 칸이 문자 그대로임을 알린다
